---
name: Comment command
on:
  issue_comment:
    types: [created]

jobs:
  comment_command:
    name: Comment command ${{ github.event.issue.number }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Debug github context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        shell: bash

      - name: Check if member
        id: member
        run: |
          gh api \
          -H "Accept: application/vnd.github+json" \
          /orgs/${{ github.repository_owner }}/members/${{ github.actor }} || echo "member=false" >> $GITHUB_OUTPUT

      - name: Get Actor
        if: ${{ steps.member.outputs.member != 'false' }}
        id: get_actor
        run: |
          echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT

      - name: Comment command
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          YT_REGEX: '/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/'  # yamllint disable-line rule:line-length
        if: >-
          steps.member.outputs.member != 'false' &&
          steps.get_actor.outputs.actor != 'LizardByte-bot'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_BOT_TOKEN }}
          script: |
            const {COMMENT_BODY, ISSUE_BODY} = process.env
            const YT_REGEX = new RegExp(process.env.YT_REGEX)

            // get comment body
            let comment = `${COMMENT_BODY}`
            console.log(`comment: ${comment}`)

            // strip any whitespace
            comment = comment.trim()

            // remove any double spaces
            do {
              comment = comment.replace("  ", " ")
            } while (comment.includes("  "))

            // return if comment does not starts with @LizardByte-bot
            if (!comment.startsWith("@LizardByte-bot")) {
              console.log("the comment is not a @LizardByte-bot command, exiting")
              return
            }

            // split comment to get positional arguments
            let args = comment.split(" ")
            let command_ran = false

            // command is args[1], parameters are args[2:]

            // approve
            if (args[1] === "approve") {
              console.log("approve command running")
              // add label "approve-queue"
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["approve-queue"]
              })

              // get list of open issues with label "approve-theme"
              const running_issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'approve-theme'
              })

              // add approve-theme label if no other issues have it
              if (issues.data.length === 0) {
                console.log("no other issues have approve-theme label, adding label")
                github.rest.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ["approve-theme"]
                })
              }
              else {
                console.log("other issues have approve-theme label, not adding label")
              }
              command_ran = true
            }

            // edit
            if (args[1] === "edit") {
              console.log("edit command running")
              // replace youtube url in issue body
              let issue_body = `${ISSUE_BODY}`
              console.log(`issue_body: ${issue_body}`)

              // https://thewebdev.info/2021/08/24/how-validate-youtube-url-with-javascript-regexes/
              current_url = issue_body.match(YT_REGEX)
              console.log(`current_url: ${current_url}`)

              // if current_url is not null
              if (current_url !== null) {
              // replace current_url with args[2]
                issue_body = issue_body.replace(current_url[0], args[2])
                console.log(`updated issue_body: ${issue_body}`)

                // update issue body
                github.rest.issues.update({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: issue_body
                })
              }
              command_ran = true
            }

            if (command_ran) {
              console.log("command ran, adding reaction")
              // add reaction to issue comment
              github.rest.reactions.createForIssueComment({
                  comment_id: context.comment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  content: "+1"
              })
            }
